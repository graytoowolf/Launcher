name: build-windows

on:
  push:
    branches: [ Bs ]
  pull_request:
    branches: [ Bs ]
  workflow_dispatch:

jobs:
  trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch Event
        run: |
          curl -XPOST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/graytoowolf/Translations/dispatches --data '{"event_type": "trigger-workflow-event"}'

  build-windows:
    name: build-windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@main
        with:
          submodules: 'recursive'

      - name: Cache Qt
        uses: actions/cache@main
        id: qt-cached
        with:
          path: "D:/Qt"
          key: ${{ runner.os }}-qt56-installed-d

      - name: Cache Qt Installer
        uses: actions/cache@main
        if: steps.qt-cached.outputs.cache-hit != 'true'
        id: installer-cached
        with:
          path: "installer.exe"
          key: ${{ runner.os }}-qt56-installer

      - name: Create QtAccount File
        if: steps.qt-cached.outputs.cache-hit != 'true'
        run: |
          mkdir C:/Users/runneradmin/AppData/Roaming/Qt/
          curl https://gist.github.com/Neptune650/1086e0a3126be6a66580b71afcf8bd99/raw/797d8b90edf07ce88f265b38a573cc6b1fb45bfb/qtaccount.txt --output C:/Users/runneradmin/AppData/Roaming/Qt/qtaccount.ini

      - name: Download Qt Installer
        if: steps.installer-cached.outputs.cache-hit != 'true' && steps.qt-cached.outputs.cache-hit != 'true'
        run: curl https://download.qt.io/new_archive/qt/5.6/5.6.3/qt-opensource-windows-x86-mingw492-5.6.3.exe --output installer.exe

      - name: Download Qt non-Interactive Script
        if: steps.qt-cached.outputs.cache-hit != 'true'
        run: curl https://gist.githubusercontent.com/Neptune650/aa6c051abc17e7d9d609add7f6dfd16a/raw/074dedb7525c0ffc010b39871615b008c2efbcd6/qt-installer-noninteractive.qs --output nonInteractive.qs

      - name: Install Qt
        if: steps.qt-cached.outputs.cache-hit != 'true'
        shell: cmd
        run: installer.exe -v --script nonInteractive.qs --silent

      - name: Setup CMake
        run: |
          curl -L https://github.com/Kitware/CMake/releases/download/v3.29.3/cmake-3.29.3-windows-i386.zip -o cmake.zip
          unzip cmake.zip

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '8'
          architecture: x86

      - name: Setup zlib
        run: |
          mkdir zlib
          cd zlib
          curl -L https://raw.githubusercontent.com/graytoowolf/xz/master/zlib/zlib-1.2.3-bin.zip -o zlib.zip
          curl -L https://raw.githubusercontent.com/graytoowolf/xz/master/zlib/zlib-1.2.3-lib.zip -o zliblibs.zip
          unzip zlib.zip
          unzip zliblibs.zip

      - name: Setup OpenSSL
        run: |
          mkdir OpenSSL
          cd OpenSSL
          curl -L https://github.com/IndySockets/OpenSSL-Binaries/raw/master/Archive/openssl-1.0.2n-i386-win32.zip -o OpenSSL.zip
          unzip OpenSSL.zip

      - name: Build
        shell: cmd
        if: steps.build-cached.outputs.cache-hit != 'true'
        run: |
          set PATH=D:\Qt\5.6.3\mingw49_32\bin;D:\Qt\Tools\mingw492_32\bin;
          set PATH=%CD%\zlib;%CD%\zlib\bin;%CD%\zlib\lib;%CD%\zlib\include;%PATH%
          set PATH=%CD%\OpenSSL;%PATH%
          set PATH=%CD%\cmake-3.23.1-windows-i386\bin;%PATH%
          set CC=D:\Qt\Tools\mingw492_32\bin\gcc.exe
          set CXX=D:\Qt\Tools\mingw492_32\bin\g++.exe
          mkdir build
          cd build
          cmake ^
           -DCMAKE_BUILD_TYPE=Release ^
           -DLauncher_NOTIFICATION_URL:STRING=https://files.multimc.org/notifications.json ^
           -DCMAKE_INSTALL_PREFIX:PATH=D:/MiniSkins/install  ^
           -DLauncher_UPDATER_BASE=https://mmc.mcpeau.com/ ^
           -DLauncher_VERSION_BUILD=%GITHUB_RUN_NUMBER% ^
           -DLauncher_PASTE_EE_API_KEY:STRING=ajtc1fWcjZqLl0jWJ9orxvAs0em2VyeTYr8eX2NrA ^
           -DLauncher_IMGUR_CLIENT_ID:STRING=d7340b1158a28c6 ^
           -DLauncher_ANALYTICS_ID:STRING=UA-179508337-1 ^
           -DLauncher_BUILD_PLATFORM=win32 ^
           -G "MinGW Makefiles" ^
           ..

      - name: Compile
        shell: cmd
        run: |
          set PATH=D:\Qt\5.6.3\mingw49_32\bin;D:\Qt\Tools\mingw492_32\bin;
          set PATH=%CD%\zlib;%CD%\zlib\bin;%PATH%
          set PATH=%CD%\OpenSSL;%PATH%
          set PATH=%CD%\cmake-3.23.1-windows-i386\bin;%PATH%
          set PATH=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;%PATH%
          cd build
          mingw32-make tcversion
          mingw32-make -j%NUMBER_OF_PROCESSORS%

      - name: Test
        shell: cmd
        run: |
          set PATH=D:\Qt\5.6.3\mingw49_32\bin;D:\Qt\Tools\mingw492_32\bin;
          set PATH=%CD%\zlib;%CD%\zlib\bin;%PATH%
          set PATH=%CD%\OpenSSL;%PATH%
          set PATH=%CD%\cmake-3.23.1-windows-i386\bin;%PATH%
          set PATH=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;%PATH%
          cd build
          mingw32-make test
          cmake -E remove_directory "D:/MiniSkins/install"

      - name: Install
        shell: cmd
        run: |
          set PATH=D:\Qt\5.6.3\mingw49_32\bin;D:\Qt\Tools\mingw492_32\bin;
          set PATH=%CD%\zlib;%CD%\zlib\bin;%PATH%
          set PATH=%CD%\OpenSSL;%PATH%
          set PATH=%CD%\cmake-3.23.1-windows-i386\bin;%PATH%
          set PATH=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;%PATH%
          cd build
          mingw32-make install

      - name: Copy OpenSSL
        shell: cmd
        run: |
          cp OpenSSL/ssleay32.dll D:/MiniSkins/install/ssleay32.dll
          cp OpenSSL/libeay32.dll D:/MiniSkins/install/libeay32.dll

      - name: 生成json文件
        run: |
          cd D:/MiniSkins/
          mkdir D:/MiniSkins/qiniu/win32/bs
          mkdir D:/MiniSkins/qiniu/MiniSkins
          curl -L https://mmc.mcpeau.com/mc.exe -o mc.exe
          Compress-Archive -Path D:/MiniSkins/install/* -DestinationPath D:/MiniSkins/qiniu/MiniSkins.zip
          .\mc $env:GITHUB_RUN_NUMBER

      - name: Upload qiniu
        run: |
          cd D:/MiniSkins/
          curl -L https://devtools.qiniu.com/qshell-v2.6.2-windows-386.zip -o qshell.zip
          unzip qshell.zip
          .\qshell account ${{ secrets.AK }} ${{ secrets.SK }} bs
          .\qshell qupload2 --src-dir=./qiniu --bucket=${{ secrets.QINIU_Name }} --up-host=http://upload-z2.qiniu.com --overwrite=true --rescan-local=true

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: mmc-cracked-win32
          path: "D:/MiniSkins/install"

  build-linux:
    name: build-linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
        with:
          submodules: 'recursive'

      - name: Install Dependencies
        run: |

          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
          sudo add-apt-repository 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial main'
          sudo add-apt-repository 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe'
          sudo apt update
          sudo apt install libgl1-mesa-dev qttools5-dev g++-5 gcc-5

      - name: Build
        run: |
          mkdir build
          cd build
          cmake \
           -DCMAKE_C_COMPILER=/usr/bin/gcc-5 \
           -DCMAKE_CXX_COMPILER=/usr/bin/g++-5 \
           -DCMAKE_BUILD_TYPE=Release \
           -DLauncher_NOTIFICATION_URL:STRING=https://files.multimc.org/notifications.json \
           -DCMAKE_INSTALL_PREFIX:PATH=/home/runner/MiniSkins/MiniSkins \
           -DLauncher_PASTE_EE_API_KEY:STRING=ajtc1fWcjZqLl0jWJ9orxvAs0em2VyeTYr8eX2NrA \
           -DLauncher_IMGUR_CLIENT_ID:STRING=d7340b1158a28c6 \
           -DLauncher_ANALYTICS_ID:STRING=UA-179508337-1 \
           -DLauncher_LAYOUT=lin-nodeps \
           -DLauncher_BUILD_PLATFORM=lin64 \
           $GITHUB_WORKSPACE

      - name: Compile
        run: |
          cd build
          make tcversion
          make -j$(nproc)

      - name: Test
        run: |
          cd build
          make test
          cmake -E remove_directory "/home/runner/MiniSkins/MiniSkins"

      - name: Install
        run: |
          cd build
          make install
          chmod +x /home/runner/MiniSkins/MiniSkins/MiniSkins
          chmod +x /home/runner/MiniSkins/MiniSkins/bin//MiniSkins

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: mmc-cracked-lin64
          path: /home/runner/MiniSkins

  build-mac:
    name: build-mac
    runs-on: macos-13

    steps:
      - uses: actions/checkout@main
        with:
          submodules: 'recursive'

      - name: Cache Dependencies
        uses: actions/cache@main
        with:
          path: /Users/runner/Library/Caches/Homebrew
          key: ${{ runner.os }}-deps-cache

      - name: Install Dependencies
        run: |
          brew cleanup
          brew install qt@5

      - name: Build
        run: |
          mkdir build
          cd build
          cmake \
          -DCMAKE_C_COMPILER=/usr/bin/clang \
          -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
          -DCMAKE_BUILD_TYPE=Release \
          -DLauncher_NOTIFICATION_URL:STRING=https://files.multimc.org/notifications.json \
          -DCMAKE_INSTALL_PREFIX:PATH=/Users/runner/work/MiniSkins/build/dist \
          -DCMAKE_PREFIX_PATH="$(brew --prefix qt@5);$(brew --prefix qt@5)/lib/cmake/Qt5Core;$(brew --prefix qt@5)/lib/cmake/Qt5Widgets;$(brew --prefix qt@5)/lib/cmake/Qt5Concurrent;$(brew --prefix qt@5)/lib/cmake/Qt5Network;$(brew --prefix qt@5)/lib/cmake/Qt5Test;$(brew --prefix qt@5)/lib/cmake/Qt5Xml" \
          -DQt5_DIR="$(brew --prefix qt@5)" \
          -DLauncher_PASTE_EE_API_KEY:STRING=ajtc1fWcjZqLl0jWJ9orxvAs0em2VyeTYr8eX2NrA \
          -DLauncher_IMGUR_CLIENT_ID:STRING=d7340b1158a28c6 \
          -DLauncher_ANALYTICS_ID:STRING=UA-179508337-1 \
          -DLauncher_BUILD_PLATFORM=osx64-5.15.2 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 \
          $GITHUB_WORKSPACE

      - name: Compile
        run: |
          cd build
          make tcversion
          make -j$(sysctl -n hw.logicalcpu)

      - name: Test
        run: |
          cd build
          make test
          cmake -E remove_directory "/Users/runner/work/MiniSkins/build/dist"

      - name: Install
        run: |
          cd build
          make install
          chmod +x /Users/runner/work/MiniSkins/build/dist/MiniSkins.app/Contents/MacOS/MiniSkins

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: mmc-cracked-osx64
          path: /Users/runner/work/MiniSkins/build/dist
